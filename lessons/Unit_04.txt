## Objectives
- Understand what imports are and why we use them in Python.
- Learn how to import and use Python libraries (modules).
- Gain practical experience with the `math`, `random`, and `datetime` libraries.
- Recognize scenarios where each library is useful in real-world programs.

## What is an Import?
In Python, an **import** lets you bring in extra features (code, functions, and classes) from other files or packages. This is called a **module** or a **library**. Imports help keep your programs simple, organized, and DRY (Don't Repeat Yourself) by reusing existing code.

## Why Use Libraries?
- Python has thousands of built-in and third-party libraries that save you time and effort.
- Libraries let you do things like math, date/time calculations, randomization, data science, graphics, and more—without writing everything from scratch.
- Learning how to use imports is fundamental for any Python programmer, because real-world code almost always relies on multiple libraries to solve practical problems.

## Basic Import Syntax

Import a module:
```python
import module_name
```

Import a specific item from a module:
```python
from module_name import thing
```

You only need to import a module once per file. After that, you can use its functions by writing `module_name.function()` or just `function()` (if imported directly).

---

## The `math` Library
The `math` library gives you access to advanced math functions that go beyond basic addition, subtraction, multiplication, and division.

**Why is it fundamental?**
- It provides mathematical constants and functions that are crucial for scientific computing, engineering, statistics, and more.
- Useful anytime you need to perform calculations with roots, trigonometry, logarithms, powers, or special constants (like π).

**When might you use it?**
- Calculating distances, angles, or areas in geometry.
- Building a calculator or graphing app.
- Working on physics simulations, statistics, or machine learning code.

**Key Examples:**
```python
import math

print(math.sqrt(16))         # Square root: 4.0
print(math.pi)               # The value of pi (3.14159...)
print(math.sin(math.pi / 2)) # Sine of 90 degrees: 1.0
print(math.log(100, 10))     # Logarithm base 10: 2.0
print(math.factorial(5))     # Factorial: 120
```

**Common math functions:**
- `math.sqrt(x)` – Square root
- `math.sin(x)`, `math.cos(x)`, `math.tan(x)` – Trigonometric functions
- `math.log(x, base)` – Logarithms
- `math.exp(x)` – e to the power x
- `math.ceil(x)`, `math.floor(x)` – Round up or down
- `math.factorial(n)` – Factorial

---

## The `random` Library
The `random` library helps you generate random numbers or make random choices. This is fundamental for games, simulations, experiments, or anywhere you want unpredictability or sampling.

**Why is it fundamental?**
- Essential for game development, shuffling cards, rolling dice, simulating experiments, picking winners, or adding unpredictability to any program.
- Many data science and AI techniques use randomness for shuffling datasets, making random splits, or initializing algorithms.

**When might you use it?**
- Creating a simple dice-rolling game.
- Shuffling a playlist or randomizing quiz questions.
- Simulating outcomes in experiments (e.g., flipping a coin 1000 times).
- Building procedural content (levels, mazes, puzzles) in games.

**Key Examples:**
```python
import random

print(random.randint(1, 10))             # Random integer between 1 and 10
print(random.choice(['a', 'b', 'c']))    # Randomly selects one from the list
print(random.random())                   # Random float between 0.0 and 1.0
print(random.sample(range(1, 50), 6))    # Lottery numbers: 6 unique random numbers

# Simulate a coin flip:
if random.choice([True, False]):
    print("Heads!")
else:
    print("Tails!")
```

**Common random functions:**
- `random.randint(a, b)` – Random integer from `a` to `b` (inclusive)
- `random.choice(seq)` – Random item from a list or tuple
- `random.random()` – Random float between 0.0 and 1.0
- `random.shuffle(list)` – Shuffle a list in place
- `random.sample(population, k)` – Unique random sample of k items

---

## The `datetime` Library
The `datetime` library helps you work with dates, times, and timestamps. This is fundamental for real-world programs that need to track time, log events, or schedule actions.

**Why is it fundamental?**
- Many applications need to store or manipulate dates and times: reminders, logs, deadlines, games, and data analysis.
- Used for calculating ages, durations, scheduling, timestamps, and much more.

**When might you use it?**
- Creating a digital clock or timer app.
- Recording when a user logs in or an action occurs.
- Calculating how many days until an event.
- Formatting dates for reports, websites, or emails.

**Key Examples:**
```python
import datetime

now = datetime.datetime.now()
print("Current date and time:", now)

birthday = datetime.date(2000, 1, 1)
print("Birthday:", birthday)

# Calculate difference between dates:
start = datetime.date(2024, 5, 1)
end = datetime.date(2024, 5, 19)
delta = end - start
print("Days between:", delta.days)

# Format dates as strings:
print(now.strftime("%Y-%m-%d %H:%M:%S"))  # 2024-05-19 14:45:00
```

**Common datetime features:**
- `datetime.datetime.now()` – Current date and time
- `datetime.date(year, month, day)` – Specific date
- `timedelta` objects for durations and differences
- `.strftime(format)` – Format dates/times as strings
- `.year`, `.month`, `.day`, `.hour`, `.minute`, `.second` – Access parts of a date/time

---

## Recap: Why These Libraries Matter
- **math**: For calculations beyond simple arithmetic—any time you need roots, trigonometry, exponents, or constants.
- **random**: For unpredictability in games, experiments, simulations, or picking samples.
- **datetime**: For anything involving dates, times, logging, or scheduling.

Learning to use these libraries gives you the foundation to build everything from calculators and clocks to games, scientific apps, and more.
